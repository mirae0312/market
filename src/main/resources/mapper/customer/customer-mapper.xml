<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.market.customerService.model.dao.CustomerServiceDao">

    <insert id="insertAnnouncement">
        insert into mk_announcement values(concat('anno-',seq_mk_announcement_no.nextval), #{title}, #{writer}, default, default, #{content}, #{announce})
        <selectKey order="AFTER" resultType="string" keyProperty="anCode">
            select concat('anno-',seq_mk_announcement_no.currval) from dual
        </selectKey>
    </insert>

    <insert id="insertAttachment">
        insert into mk_attachment values(seq_mk_attachment_no.nextval, #{code}, #{originalFilename}, #{renamedFilename})
    </insert>

    <update id="updateAnnouncementReadCount">
        update mk_announcement set read_count = read_count + 1 where an_code = #{code}
    </update>

    <select id="selectOneAnnouncement" resultType="announcement">
        select * from mk_announcement where an_code = #{code}
    </select>

    <select id="selectAllAttachments" resultType="attachment">
        select * from mk_attachment where code = #{code} order by no asc
    </select>

    <select id="selectAllAnnouncement" resultType="announcement">
        select * from mk_announcement where announce = 'D' order by reg_date desc
    </select>

    <select id="countAllAnnouncement" resultType="_int">
        select count(*) from mk_announcement
    </select>

    <delete id="deleteAnnouncement">
        delete from mk_announcement where an_code = #{code}
    </delete>

    <delete id="deleteAttachments">
        delete from mk_attachment where code = #{code}
    </delete>

    <update id="updateAnnouncement">
        update mk_announcement set title = #{title}, writer = #{writer}, content = #{content}, announce = #{announce} where an_code = #{anCode}
    </update>
    
    <select id="selectUserDefaultAddress" parameterType="string" resultType="map">
    	select
    		*
    	from
    		mk_address
    	where
    		id = #{userId}
    		and
    		default_address = 'D'
    </select>
    
    <select id="selectUserAccumulationRate" parameterType="string" resultType="int">
    	select
    		a.accumulate_rate
    	from
    		mk_grade g inner join accumulation_rate a
    		on g.grade = a.grade
    	where
    		id = #{userId}
    </select>

    <select id="selectBestProductReview" resultType="productReview">
        select
            *
        from(
            select
                *
            from
                mk_product_review
            where
                p_code = #{code}
            order by
                read_count desc, likes desc, reg_date desc
                )
        where
            rownum = 1
    </select>

    <select id="selectFirstPageProductReview" resultType="productReview">
        select
            *
        from(
            select
                *
            from
                mk_product_review
            where
                announce = 'D'
                and
                p_code = #{code}
                <if test='bool == "T"'>
                and
                not no = #{no}
                </if>
            order by
                reg_date desc)
        <where>
            <if test='bool == "F"'>
                rownum between 1 and 5
            </if>
            <if test='bool == "T"'>
                rownum between 1 and 4
            </if>
        </where>
    </select>

    <select id="countAllProductReview" resultType="int">
        select
            count(*)
        from
            mk_product_review
        where
            announce = 'D'
            and
            p_code = #{code}
            and
            not no in
            <foreach collection="firstPage" index="index" item="no" open="(" separator="," close=")">
                #{no}
            </foreach>
    </select>


</mapper>

